{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to the TobsDB documentation! What is TobsDB? TobsDB is a document database built in Golang. Why TobsDB? You may be wondering what advantages TobsDB has over other database options... ...Well I'm wondering about that too. If you find out let me know ;). One thing I like about TobsDB is the built-in schema support. No connections without schemas means you can be sure your data has the right shape. I like to think TobsDB is super speedy. But I guess no other way to find out than to test in prod Help wanted with the docs. Please reach out if you're willing to help, thank you.","title":"Introduction"},{"location":"#introduction","text":"Welcome to the TobsDB documentation!","title":"Introduction"},{"location":"#what-is-tobsdb","text":"TobsDB is a document database built in Golang.","title":"What is TobsDB?"},{"location":"#why-tobsdb","text":"You may be wondering what advantages TobsDB has over other database options... ...Well I'm wondering about that too. If you find out let me know ;). One thing I like about TobsDB is the built-in schema support. No connections without schemas means you can be sure your data has the right shape. I like to think TobsDB is super speedy. But I guess no other way to find out than to test in prod Help wanted with the docs. Please reach out if you're willing to help, thank you.","title":"Why TobsDB?"},{"location":"getting-started/","text":"Getting Started Installation There's a few ways to install TobsDB. 1. go install $ go install github.com/tobshub/tobsdb/cmd/tdb@latest 2. Github Releases Navigate to the releases page and download the latest release. 3. Docker Coming soon Configuration Command line flags -db=<path> : the absolute path to the db.tdb file (or where it should be). Defaults to <cwd>/db.tdb -m : when used or set to true, the database data remains in memory and is not written a file when the program exits. Defaults to false. -port=<port> : the listening port. Defaults to 7085 (tobs in leet-speak :v) -log : optionally print logs. Defaults to false -dbg : optionally print extra logs. Defaults to false -u : override the set username to use when running the program. Defaults to ENV.TDB_USER -p : override the set password to use when running the program. Defaults to ENV.TDB_PASS Environment variables TDB_USER : set the username to use when running the program. TDB_PASS : set the password to use when running the program.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"There's a few ways to install TobsDB.","title":"Installation"},{"location":"getting-started/#1-go-install","text":"$ go install github.com/tobshub/tobsdb/cmd/tdb@latest","title":"1. go install"},{"location":"getting-started/#2-github-releases","text":"Navigate to the releases page and download the latest release.","title":"2. Github Releases"},{"location":"getting-started/#3-docker","text":"Coming soon","title":"3. Docker"},{"location":"getting-started/#configuration","text":"","title":"Configuration"},{"location":"getting-started/#command-line-flags","text":"-db=<path> : the absolute path to the db.tdb file (or where it should be). Defaults to <cwd>/db.tdb -m : when used or set to true, the database data remains in memory and is not written a file when the program exits. Defaults to false. -port=<port> : the listening port. Defaults to 7085 (tobs in leet-speak :v) -log : optionally print logs. Defaults to false -dbg : optionally print extra logs. Defaults to false -u : override the set username to use when running the program. Defaults to ENV.TDB_USER -p : override the set password to use when running the program. Defaults to ENV.TDB_PASS","title":"Command line flags"},{"location":"getting-started/#environment-variables","text":"TDB_USER : set the username to use when running the program. TDB_PASS : set the password to use when running the program.","title":"Environment variables"},{"location":"schema/","text":"Schema.tdb Schema.tdb (the schema file) is where the type declarations for tables and fields in a tobsdb database go. The schema.tdb file lives client side and is sent to the tobsdb server on the initial connection request. Types TobsDB has a few built-in types which are accepted in the schema.tdb file: Int String Vector Float Date Bool Bytes Vector Declaration Syntax Tables In the schema.tdb file, only one type of top level declaration can be found. Which is the $TABLE declaration. $TABLE is used to start the declaration for a new table, and is used in the following way: $TABLE <table_name> { ... } where <table_name> is the name you want to give to the table being declared. There's a few rules for declaring a new table aside from starting with $TABLE : the opening brace, { , must always be on the same line as the $TABLE <table_name> declaration. the closing braces, } , must always be on a line after the $TABLE <table_name> declaration. all fields belonging to a table must be declared between the opening and closing braces - on a line of their own. Fields Fields are simply properties that exist on the $TABLE object. The rules for declaring a field are simple: <field_name> <data_type> <...properties?> That is, start with the field's name, then its type (which must be a TobsDB type), then lastly and optionally any extra field properties. It is important to exhaustively declare all fields on a table because fields not declared will never be used, even if they are sent in a query. Comments Comments are allowed in the schema.tdb file but must always be on a line of their own and start with double forward slash ( // ). Example $TABLE user { id Int key(primary) name String unique(true) DOB Date optional(true) best_friend Int relation(user.id) // store the user's favorite games favorite_games Vector vector(String) }","title":"Schema.tdb"},{"location":"schema/#schematdb","text":"Schema.tdb (the schema file) is where the type declarations for tables and fields in a tobsdb database go. The schema.tdb file lives client side and is sent to the tobsdb server on the initial connection request.","title":"Schema.tdb"},{"location":"schema/#types","text":"TobsDB has a few built-in types which are accepted in the schema.tdb file: Int String Vector Float Date Bool Bytes Vector","title":"Types"},{"location":"schema/#declaration-syntax","text":"","title":"Declaration Syntax"},{"location":"schema/#tables","text":"In the schema.tdb file, only one type of top level declaration can be found. Which is the $TABLE declaration. $TABLE is used to start the declaration for a new table, and is used in the following way: $TABLE <table_name> { ... } where <table_name> is the name you want to give to the table being declared. There's a few rules for declaring a new table aside from starting with $TABLE : the opening brace, { , must always be on the same line as the $TABLE <table_name> declaration. the closing braces, } , must always be on a line after the $TABLE <table_name> declaration. all fields belonging to a table must be declared between the opening and closing braces - on a line of their own.","title":"Tables"},{"location":"schema/#fields","text":"Fields are simply properties that exist on the $TABLE object. The rules for declaring a field are simple: <field_name> <data_type> <...properties?> That is, start with the field's name, then its type (which must be a TobsDB type), then lastly and optionally any extra field properties. It is important to exhaustively declare all fields on a table because fields not declared will never be used, even if they are sent in a query.","title":"Fields"},{"location":"schema/#comments","text":"Comments are allowed in the schema.tdb file but must always be on a line of their own and start with double forward slash ( // ).","title":"Comments"},{"location":"schema/#example","text":"$TABLE user { id Int key(primary) name String unique(true) DOB Date optional(true) best_friend Int relation(user.id) // store the user's favorite games favorite_games Vector vector(String) }","title":"Example"},{"location":"clients/js/","text":"NodeJS Client The official tobsdb nodejs client is available here . Installation pnpm add tobsdb Or if you're feeling funky and using npm or yarn npm|yarn install tobsdb API documentation class TobsDB static async connect<Schema>(url: string, db_name: string, conn_options: object, tdb_options: TobsDBOptions): Promise<TobsDB<Schema>> Connects to a tobsdb server. Parameters: url : the url of the tobsdb server db_name : the name of the database to use in the tobsdb server(databse will be created if it did not previously exist) conn_options : connection options schema_path : the to the schema.tdb file. Defaults to $(cwd)/schema.tdb auth : authentication credentials username : username corresponding to the user of the tobsdb server password : password corresponding to the password of the tobsdb server tdb_options : change default client behaviour Type Parameters: Schema : gives type inference for all database query function parameters and return types. The type should correspond to the types in your schema.tdb file. static async validateSchema(url: string, schema_path: string): Promise<TDBSchemaValidationResponse> Run validation checks on a schema.tdb file Parameters: url : the url of the tobsdb server schema_path : the path to the schema.tdb file. Defaults to $(cwd)/schema.tdb Return: Returns a TDBSchemaValidationResponse . async disconnect(): void Gracefully disconnect from tobsdb server. async create(table: string, data: object): TDBResponse Send a create request to the tobsdb server. Parameters: table : the name of the table to create a row in. Must correspond to the name of a table in the schema.tdb file. data : data to use in the create request. async createMany(table: string, data: object): TDBResponse Send a create-many request to the tobsdb server. Parameters: table : the name of the table to create rows in. Must correspond to the name of a table in the schema.tdb file. data : an array data to use in the create-many request. async findUnique(table: string, where: object): TDBResponse Send a findUnique request to the tobsdb server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In findUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. async findMany(table: string, where: object): TDBResponse Send a findMany request to the tobsdb server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. async updateUnique(table: string, where: object, data: object): TDBResponse Send an updateUnique request to the tobsdb server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In updateUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. data : data to use in the update request. async updateMany(table: string, where: object): TDBResponse Send an updateMany request to the tobsdb server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. data : data to use in the update request. async deleteUnique(table: string, where: object): TDBResponse Send a deleteUnique request to the tobsdb server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In deleteUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. async deleteMany(table: string, where: object): TDBResponse Send a deleteMany request to the tobsdb server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for.","title":"JavaScript/Typescript"},{"location":"clients/js/#nodejs-client","text":"The official tobsdb nodejs client is available here .","title":"NodeJS Client"},{"location":"clients/js/#installation","text":"pnpm add tobsdb Or if you're feeling funky and using npm or yarn npm|yarn install tobsdb","title":"Installation"},{"location":"clients/js/#api-documentation","text":"","title":"API documentation"},{"location":"clients/js/#class-tobsdb","text":"","title":"class TobsDB"},{"location":"clients/js/#static-async-connectschemaurl-string-db_name-string-conn_options-object-tdb_options-tobsdboptions-promisetobsdbschema","text":"Connects to a tobsdb server.","title":"static async connect&lt;Schema&gt;(url: string, db_name: string, conn_options: object, tdb_options: TobsDBOptions): Promise&lt;TobsDB&lt;Schema&gt;&gt;"},{"location":"clients/js/#parameters","text":"url : the url of the tobsdb server db_name : the name of the database to use in the tobsdb server(databse will be created if it did not previously exist) conn_options : connection options schema_path : the to the schema.tdb file. Defaults to $(cwd)/schema.tdb auth : authentication credentials username : username corresponding to the user of the tobsdb server password : password corresponding to the password of the tobsdb server tdb_options : change default client behaviour","title":"Parameters:"},{"location":"clients/js/#type-parameters","text":"Schema : gives type inference for all database query function parameters and return types. The type should correspond to the types in your schema.tdb file.","title":"Type Parameters:"},{"location":"clients/js/#static-async-validateschemaurl-string-schema_path-string-promisetdbschemavalidationresponse","text":"Run validation checks on a schema.tdb file","title":"static async validateSchema(url: string, schema_path: string): Promise&lt;TDBSchemaValidationResponse&gt;"},{"location":"clients/js/#parameters_1","text":"url : the url of the tobsdb server schema_path : the path to the schema.tdb file. Defaults to $(cwd)/schema.tdb","title":"Parameters:"},{"location":"clients/js/#return","text":"Returns a TDBSchemaValidationResponse .","title":"Return:"},{"location":"clients/js/#async-disconnect-void","text":"Gracefully disconnect from tobsdb server.","title":"async disconnect(): void"},{"location":"clients/js/#async-createtable-string-data-object-tdbresponse","text":"Send a create request to the tobsdb server.","title":"async create(table: string, data: object): TDBResponse"},{"location":"clients/js/#parameters_2","text":"table : the name of the table to create a row in. Must correspond to the name of a table in the schema.tdb file. data : data to use in the create request.","title":"Parameters:"},{"location":"clients/js/#async-createmanytable-string-data-object-tdbresponse","text":"Send a create-many request to the tobsdb server.","title":"async createMany(table: string, data: object): TDBResponse"},{"location":"clients/js/#parameters_3","text":"table : the name of the table to create rows in. Must correspond to the name of a table in the schema.tdb file. data : an array data to use in the create-many request.","title":"Parameters:"},{"location":"clients/js/#async-finduniquetable-string-where-object-tdbresponse","text":"Send a findUnique request to the tobsdb server.","title":"async findUnique(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_4","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In findUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema.","title":"Parameters:"},{"location":"clients/js/#async-findmanytable-string-where-object-tdbresponse","text":"Send a findMany request to the tobsdb server.","title":"async findMany(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_5","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for.","title":"Parameters:"},{"location":"clients/js/#async-updateuniquetable-string-where-object-data-object-tdbresponse","text":"Send an updateUnique request to the tobsdb server.","title":"async updateUnique(table: string, where: object, data: object): TDBResponse"},{"location":"clients/js/#parameters_6","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In updateUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. data : data to use in the update request.","title":"Parameters:"},{"location":"clients/js/#async-updatemanytable-string-where-object-tdbresponse","text":"Send an updateMany request to the tobsdb server.","title":"async updateMany(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_7","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. data : data to use in the update request.","title":"Parameters:"},{"location":"clients/js/#async-deleteuniquetable-string-where-object-tdbresponse","text":"Send a deleteUnique request to the tobsdb server.","title":"async deleteUnique(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_8","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In deleteUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema.","title":"Parameters:"},{"location":"clients/js/#async-deletemanytable-string-where-object-tdbresponse","text":"Send a deleteMany request to the tobsdb server.","title":"async deleteMany(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_9","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for.","title":"Parameters:"},{"location":"clients/overview/","text":"Client Overview TobsDB has official clients for the following languages: JavaScript/Typescript Support for other languages will be added. Making a TobsDB client. Anything can be a tobsdb client if it: Connects to a tobsdb server via a websocket connect request. Sends requests to the tobsdb servers through the connected websocket. That's it. Well there's a little bit more to it: All queries require these two arguments: action : The query action to execute. One of: create , createMany , findUnique , findMany , updateUnique , updateMany , deleteUnique , deleteMany table : The name of the table in the tobsdb server to run the query on. For the purpose of this explanation let's divide all the possible queries in 3 groups: Change-only queries: create, createMany Search-only queries: findUnique, findMany, deleteUnique, deleteMany and Search-Change queries: updateUnique, updateMany The reason this grouping was made because of the arguments they take. Change-only queries require the following additional argument: data : The data to use in the query. In the case of createMany queries, this is expected to be an array. Search-only queries require the following additional argument: where : The conditions to check against in the query. Search-Change queries require the following additional arguments: where : The conditions to check against in the query. data : The data to use in the query. In Search-only and Search-Change *Unique queries, in the where argument, only unique or primary-key fields are used in the operation even if others are provided. In Search-only and Search-Change *Many queries, in the where argument, there are dynamic search options available for Int and String fields: Int : eq, ne, gt, gte, lt, lte String : contains, startsWith, endsWith In Search-Change queries, in the data argument, there are dynamic search change options available for Int and Vector fields: Int : increment, decrement Vector : push *In all queries, only fields that are defined in the schema are used, even if others are provided. Example Request With of a schema.tdb: $TABLE user { id Int key(primary) name String age Int height String default(\"short\") } createUnique { \"action\": \"create\", \"table\": \"user\", \"data\": { \"name\": \"Maya\", \"age\": 28 }, } createMany { \"action\": \"createMany\", \"table\": \"user\", \"data\": [ { \"name\": \"Karolis\", \"age\": 21, \"height\": \"tall\" } { \"name\": \"Wolfred\", \"age\": 24 }, ] } findUnique { \"action\": \"findUnique\", \"table\": \"user\", \"where\": { \"id\": 1 } } findMany { \"action\": \"findMany\", \"table\": \"user\", \"where\": { \"age\": { \"gte\": 18 }} } updateUnique { \"action\": \"updateUnique\", \"table\": \"user\", \"where\": { \"id\": 1 }, \"data\": { \"age\": { \"increment\": 1 }, \"height\": \"tall\" } } updateMany { \"action\": \"updateMany\", \"table\": \"user\", \"where\": { \"age\": { \"gte\": 69 }}, \"data\": { \"age\": { \"decrement\": 1 }} } deleteUnique { \"action\": \"deleteUnique\", \"table\": \"user\", \"where\": { \"id\": 1 }, } deleteMany { \"action\": \"deleteMany\", \"table\": \"user\", \"where\": { \"name\": { \"contains\": \"o\" }}, }","title":"Overview"},{"location":"clients/overview/#client-overview","text":"TobsDB has official clients for the following languages: JavaScript/Typescript Support for other languages will be added.","title":"Client Overview"},{"location":"clients/overview/#making-a-tobsdb-client","text":"Anything can be a tobsdb client if it: Connects to a tobsdb server via a websocket connect request. Sends requests to the tobsdb servers through the connected websocket. That's it. Well there's a little bit more to it: All queries require these two arguments: action : The query action to execute. One of: create , createMany , findUnique , findMany , updateUnique , updateMany , deleteUnique , deleteMany table : The name of the table in the tobsdb server to run the query on. For the purpose of this explanation let's divide all the possible queries in 3 groups: Change-only queries: create, createMany Search-only queries: findUnique, findMany, deleteUnique, deleteMany and Search-Change queries: updateUnique, updateMany The reason this grouping was made because of the arguments they take. Change-only queries require the following additional argument: data : The data to use in the query. In the case of createMany queries, this is expected to be an array. Search-only queries require the following additional argument: where : The conditions to check against in the query. Search-Change queries require the following additional arguments: where : The conditions to check against in the query. data : The data to use in the query. In Search-only and Search-Change *Unique queries, in the where argument, only unique or primary-key fields are used in the operation even if others are provided. In Search-only and Search-Change *Many queries, in the where argument, there are dynamic search options available for Int and String fields: Int : eq, ne, gt, gte, lt, lte String : contains, startsWith, endsWith In Search-Change queries, in the data argument, there are dynamic search change options available for Int and Vector fields: Int : increment, decrement Vector : push *In all queries, only fields that are defined in the schema are used, even if others are provided.","title":"Making a TobsDB client."},{"location":"clients/overview/#example-request","text":"With of a schema.tdb: $TABLE user { id Int key(primary) name String age Int height String default(\"short\") }","title":"Example Request"},{"location":"clients/overview/#createunique","text":"{ \"action\": \"create\", \"table\": \"user\", \"data\": { \"name\": \"Maya\", \"age\": 28 }, }","title":"createUnique"},{"location":"clients/overview/#createmany","text":"{ \"action\": \"createMany\", \"table\": \"user\", \"data\": [ { \"name\": \"Karolis\", \"age\": 21, \"height\": \"tall\" } { \"name\": \"Wolfred\", \"age\": 24 }, ] }","title":"createMany"},{"location":"clients/overview/#findunique","text":"{ \"action\": \"findUnique\", \"table\": \"user\", \"where\": { \"id\": 1 } }","title":"findUnique"},{"location":"clients/overview/#findmany","text":"{ \"action\": \"findMany\", \"table\": \"user\", \"where\": { \"age\": { \"gte\": 18 }} }","title":"findMany"},{"location":"clients/overview/#updateunique","text":"{ \"action\": \"updateUnique\", \"table\": \"user\", \"where\": { \"id\": 1 }, \"data\": { \"age\": { \"increment\": 1 }, \"height\": \"tall\" } }","title":"updateUnique"},{"location":"clients/overview/#updatemany","text":"{ \"action\": \"updateMany\", \"table\": \"user\", \"where\": { \"age\": { \"gte\": 69 }}, \"data\": { \"age\": { \"decrement\": 1 }} }","title":"updateMany"},{"location":"clients/overview/#deleteunique","text":"{ \"action\": \"deleteUnique\", \"table\": \"user\", \"where\": { \"id\": 1 }, }","title":"deleteUnique"},{"location":"clients/overview/#deletemany","text":"{ \"action\": \"deleteMany\", \"table\": \"user\", \"where\": { \"name\": { \"contains\": \"o\" }}, }","title":"deleteMany"}]}